name: Build Kernel
on:
  workflow_dispatch:
    inputs:
      LTO:
        description: 'Link Time Optimisation'
        required: true
        default: 'none'
        type: choice
        options:
          - none
          - thin
          - full
      KBUILD_USER:
        description: Kbuild user
        default: 'rsuntk'
        required: true
      SETUP_KSU:
        description: KernelSU support (optional)
        type: boolean
      CLANG_SEVENTEEN:
        description: Compile with clang 16
        type: boolean
      UPLOAD_TO_TG:
        description: Upload to Telegram
        type: boolean
        
jobs:
  build:
    runs-on: ubuntu-latest
    environment: uploadTelegram
    steps:
    - uses: actions/checkout@v4
      with:
        path: kernel_root
        show-progress: false
        fetch-depth: 1
        
    - name: Prepare dependencies
      run: |
        sudo apt update -y
        sudo apt install bc cpio flex bison aptitude git python-is-python3 libc6 libc6-dev tar perl curl lz4 -y
        sudo aptitude install libssl-dev -y
        
    - name: Fetch toolchains
      run: |
        mkdir toolchains
        cd toolchains
        if [[ "${{ github.event.inputs.CLANG_SEVENTEEN }}" = "true" ]]; then
          mkdir clang-17 && cd clang-17
          wget -q -O clang17.tar.gz https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android14-release/clang-r487747c.tar.gz
          tar -xf clang17.tar.gz && rm clang17.tar.gz && cd ..
        else
          git clone --depth=1 https://gitlab.com/Rissu-Projekt/toolchains/clang-toolchains -b clang-r383902 clang-11
        fi
        git clone https://gitlab.com/Rissu-Projekt/toolchains/aarch64-linux-android.git --depth=1 google
      working-directory: kernel_root

    - name: Prepare timezone fix
      run: |
        sudo rm /etc/localtime
        sudo ln -s /usr/share/zoneinfo/Asia/Jakarta /etc/localtime
        
    - name: Build kernel
      id: buildKernel
      run: |
        if [[ "${{ github.event.inputs.CLANG_SEVENTEEN }}" = "true" ]]; then
          export PATH=$(pwd)/toolchains/clang-17/bin:$PATH
        else
          export PATH=$(pwd)/toolchains/clang-11/bin:$PATH
        fi
        export CROSS_COMPILE=$(pwd)/toolchains/google/bin/aarch64-linux-android-
        export CLANG_TRIPLE=aarch64-linux-gnu-
        export KBUILD_BUILD_HOST="rsuntk_orgs"
        export KBUILD_BUILD_USER="${{ github.event.inputs.KBUILD_USER }}"
        export BUILD_START=$(date)
        export IS_CI=true
        export DEFCONFIG="rsuntk_defconfig"
        export DEVICE=A235F
        export LTO="${{ github.event.inputs.LTO }}"
        export QCA_IS_MODULE=true
        export LLVM=1
        export LLVM_IAS=1
        # stub, we'll implement this later
        export SELINUX_STATE="Enforcing"
        
        if [[ "${{ github.event.inputs.SETUP_KSU }}" = "true" ]]; then 
          export KERNELSU=true
        fi
        
        bash $(pwd)/build.sh kernel --jobs $(nproc --all) `echo $DEFCONFIG`
        
        if [[ "${{ github.event.inputs.SETUP_KSU }}" = "true" ]]; then
        	KSU_REV_COUNT=$(cd KernelSU && git rev-list --count HEAD)
        	KSU_VERSION=$(expr 10200 + $KSU_REV_COUNT)
        else
        	KSU_VERSION="No KernelSU"
        fi
        echo "- KernelSU version: $KSU_VERSION"
        
        ## CREATE buildDetails.txt
        printf "Localversion: `./getutsrel`
        Clang version: `clang -v 2>&1 | grep ' version ' | sed 's/[[:space:]]*$//'`
        Build: `date +'%d %B %Y @ %m:%M'`
        Defconfig: `echo $DEFCONFIG`
        KernelSU: `echo $KSU_VERSION`
        LTO: `echo $LTO`
        SELinux: `echo $SELINUX_STATE`
        " >> buildDetails.txt
        
        echo ""
        echo "===================================================="
        strings out/arch/arm64/boot/Image | grep "Linux version"
        echo "===================================================="
        mv out/.config out/build_config.txt
        gitsha1=$(git rev-parse --short HEAD)
        buildDetails="`make kernelversion`_`echo $gitsha1`-`date +'%Y%m%d%H%M%S'`" && echo "buildDetails=$buildDetails" >> $GITHUB_OUTPUT
      working-directory: kernel_root
      
    - name: Upload config
      uses: actions/upload-artifact@v4
      with:
        name: Config-${{ steps.buildKernel.outputs.buildDetails }}
        path: kernel_root/out/build_config.txt
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Build-${{ steps.buildKernel.outputs.buildDetails }}
        path: |
          kernel_root/out/arch/arm64/boot/*
          
    - name: Upload AnyKernel3
      uses: actions/upload-artifact@v4
      with:
        name: AnyKernel3-${{ steps.buildKernel.outputs.buildDetails }}
        path: kernel_root/AnyKernel3/*
        compression-level: 9
        
    - name: Upload to Telegram
      if: github.event.inputs.UPLOAD_TO_TG == 'true'
      env:
        CHAT_ID: ${{ secrets.CHAT_ID }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        TITLE: "Galaxy A23 Kernel"
      run: |
        if [ ! -z "${{ secrets.BOT_TOKEN }}" ]; then
          ZIP=$(find `pwd` -name "*.zip")
          bash $(pwd)/scripts/rsuntkbot.sh $ZIP "`cat buildDetails.txt`"
        fi
      working-directory: kernel_root